                              JAVA
							  
							  
What is java?

  							  
	programming language?

    	to  develop the software
		
object oriented programming language
		
		
		in java , where exactly data will store?
		
		in the form of object
	
	
	by using java, what we can achieve?
	
	  to develop the software/application
	  
	  
	1995 - james gosling 

 when he released this software, he released into three 
editions

    1.jse - java standard editions
	
	     -desktop / standalone application
		 
		 
    2.jee - java enterprise editions
	
	  -jee got implemented on top of jse
	  -distributed applications
	  
    3.jme - java micro/mobile edition

            ->mobile or micro applications
			->standalone/distributed
			
types of application(s):

   ->desktop / standalone application
   ->internet / distributed application(s)


   calculator
   acrobatic reader
   antivirus  - desktop application 
   
   results are not sharable across the globe.
   
   
internet application:

  www.facebook.com

www.gmail.com 

www.yahoo.com 
 --> distributed applicatons

 results are sharable across the globe.
 
 java -> application 
 
    we have to write the java program?
	

how can we write the java program?

we have to follow syntaxes.

  
  
 what is syntax?
 
 rules we have to follow while we are coding
 
   language vendors
   
   java was given by?
   
      sun microsystem
	  oracle
	  
	  scjp 
	  ocjp
	  
   
what are the steps we have to follow to write the java 
program?


1.download the java software (jdk)-open source
2.install the software 
3.select the editor/ide (eclipse,netbeans,myeclipse)
4.write the java program
5.save the java program
6.compile the java program
7.execute/run the java program



structure of java program:

  every java program can start with by defining the class.
  
  class <classname>
  {
  
      public static void main(String[] args){
	  
	     //logic
	  
	  }
  
  
  }


how can we save:

 <filename>.java
 
 Test1.java
 
 can we give filename and class name both are same?
 
  yes we can 
  
  
how can we compile?

   we have one command 
   
      javac <filename>.java
	  
what happend when we compile the java program?

java compiler 
    -system defined java program 
	
	-.java file(source code)
	
	-convert .java file into .class file
	
	-.class file contains - byte code
	
	-byte code is not human readable code
	
	if we follow the syntaxes correctly then only 
	compiler will give you .class file which contains 
	byte code otherwise compiler will give you 
	compile time errors.
	
	.class file got generated based on the filename 
	 or class name?
	 
	   class name only i.e.  Welcome.class
	   
	
jvm will take this .class file as an input 
and converts byte code into machine level code.

how can we execute/run the java program?

   jvm
   
   command: java <classname>
   
    java Welcome
	
note:
whenever we execute the java program, jvm internally calls
or invokes predefined method i.e. main() 




class:
``````
every java program should starts with by defining the class.

how can we define the class?

  class <classname>;
  
  class -> it is a java reserved keyword
  
  all java reserved keywords must be in lower case only.
  
   class <classname>
   {
   }



example:
`````````
class Welcome{

  public static void main(String[] args){
  
      
	  System.out.println("welcome to java learning");
	
	
  
  }



}







path:

path is the location where all java related tools 
are available.

   C:\Program Files\Java\jdk-20\bin
   
 
class:
``````
 variable:
 
 syntax:
 
   <datatype> <varialename> = <value>;
 
   purpose: to store the data.
   
   100
   
   int x=100;
 
   what datatypes we have in java?
   
  primitive datatypes:
  
   in java, we have 4 category datatypes we have
   
    1.integer -to store the integer values
	     byte,short,int,long
	2.float 
	     float,double
	3.character 
	     char
	4.boolean 
	     boolean 
		 
		 
  every datatype is maintaining two things


             1.range
			 2.memory size
			 
			 
byte 

  1 byte 
  -128 to 127
  
  byte b = 130;
  
-2^n-1 to (2^n-1) - 1
  
   
   where n reprsents no.of bits
   
   
   1 byte => 8 bits
   
   -2^8 to 2^8 -1
   -128 to 127
   
   
   short -> 2 bytes
   
   int -> 4 bytes, long - 8 bytes
   
   float -> to store decimal values 
   
      float-> 4 bytes
	  double -> 8 bytes
   
   float f = 3.4f;
   
   double d = 8.9;
   
   
   by default decimal value is of double type.
   
   
   
   3.4
   
   
   3 -> scale
   4 -> precision
   
   the precision size upto 5 digits if our dataype is 
   float
   
   the precision size upto 14 digits if our datatype is 
   double.
   
    4.544454(float)
	4.34353535345643434534543;(double)
   
   byte x = 120;// 1 byte memory only
   
   
   character :
     to store single character information
     it should enclosed within the single quotes	 
	 
	 char c = 'r';//valid
	 2 bytes
	 
	 java follows unicode international language
	 it supports almost 18 international languages
	 
	 
	boolean :
	
	  boolean 
	  
	  to store logical values either true or false.
	  
	  boolean b = true;
	  
	 true or false -> these are the java reserved keywords
	 
	 
	float datatype precision max size is 7 digits
    double datatype precision max size is 15 digits

example:
````````
class DataTypesDemo{

public static void main(String[] args){

            byte b = 100;
			float f=5.6878965432f;
			double d = 8.98786758943679812345;
			
			char c = 'r';
			char c1[]={'r','k'};
			
			String s = "rk";
			System.out.println("byte value is: " + b);
			System.out.println("float value is : " + f);
			
			System.out.println("double value is:" + d);
			
			System.out.println("Character value is : " + c);

            System.out.print(c1[0]);
			System.out.println(c1[1]);
			
			System.out.println("string value is " + s);

}




}
	


variable:

  to store the data
  

method:
```````
method is the placce where we are writing the logic 
which is used to perform some operations based on the 
requirement.

syntax:

   <returntype> <methodname>([parameters])
   {
     //logic
   }




ex:

   void display()
   {
     System.out.println("welome");
	}
	
	void -returntype 
	but meaning is if a method is not returning any value we 
	should specify return type as void.
	
	
	 int getSum()
	{
	  return 2+3;
	 }
	 
	 
note: return type and return value type must be 
compatible with each otehr otherwise we will get 
compile time errors.


define one method which gives your salary?

 
    float getSalary(){
	
	  return 7896.75f;
	}

define one method which gives your fullname?


    String getFullName(String firstName,String lastName)
	{
	  return firstName + lastName;
	}
	
	  getFullName("Rama","Krishna");
	  
	    RamaKrishna
		


define one method which takes two values and gives 
multiplication?

                   double getMultiplication(double x, double y)
				   {
				      return x*y;
				   }
 


getMultiplication(5.6,6.7);



variables

method


class:
  class is  a collection of variables and methods 
  into a single unit.
  
  class <classname>{
  
     //variables
	 //methods
  
  }
  
 example:
````````````
class Student
{
  //variables or properties or datamembers
  int stid=100;
  String stname="rama";
  double stmarks=90;
  
  //method(s) 
  public void getStudentInfo(){  
  System.out.println("student id is : " + stid);
  System.out.println("student name is : " + stname);
  System.out.println("student marks is: " + stmarks);
  }
}  

	note:

java supports only member properties 
it doesn't support non member properties

note:

in java, inner method definition is not possible, where as in java
inner method invocation is possible.


object:
```````
instance of a class is known as object.

instance:

allocating sufficient amount of memory spaces for the
properties which we declared inside the class.

	
   how can we create the object:

syntax:

   <classname> <objectname> = new <classname>();
   
   Student obj = new Student();
   
   
 example:
 `````````
 class Student
{
  //variables or properties or datamembers
  int stid=100;
  String stname="rama";
  double stmarks=90;
  
  //method(s) 
  public void getStudentInfo(){  
  System.out.println("student id is : " + stid);
  System.out.println("student name is : " + stname);
  System.out.println("student marks is: " + stmarks);
 
  }
  
  public static void main(String[] args){
	  
	  //invoke or call getStudentInfo()
	  
	  //create the object 
	  
	  Student obj = new Student();
	  //call the method using object name
	  //obj.getStudentInfo();
	  
	  System.out.println("student id is : " + obj.stid);
	  System.out.println("Student name is :" + obj.stname);
	  System.out.println("Student marks is: " + obj.stmarks);
  }
 
}  







note:
when you define the class, memory won't be created for the 
properties which you define inside the class, but when we create
the object then only memory spaces will be created for the properties 
of the class to store the data.



  ide - integrated development environment

eclipse,intellij,netbeans,myeclipse etc...



eclipse -> open source
  
  link to download eclipse: https://www.eclipse.org/downloads/
  
 example:
 ```````
 
public class Employee {
	
	//variables declaration 
	int empid;
	String empname;
	float empsalary;
	
	//method definition 
	public void setValues(int empid, String empname, float empsalary) {
		
		this.empid=empid;
		this.empname=empname;
		this.empsalary=empsalary;
	}
	
	
	public void getEmpDetails()
	{
		System.out.println("employee id : " + this.empid);
		System.out.println("employee name : " + this.empname);
		System.out.println("employee salary:" + this.empsalary);
	}
	public static void main(String[] args) {
		
		
		//create the object
		
		Employee obj = new Employee();
		obj.setValues(100, "RAMA", 8978f);
		
		//call the getEmpDetails()
		obj.getEmpDetails();
	}
	
	

}


example:
`````````
//perform additoin of two numbers
public class Test2 {
	
	
	public int getSum(int x, int y)
	{
		return x+y;
	}

	public static void main(String[] args) {
		
		
		Test2 obj = new Test2();
		
		
		System.out.println("sum is : " + obj.getSum(4, 5));
		
	}
}


instance vs static example:



public class Test3 {
	//instance or non-static variables
	int stid=100;
	String stname = "rama";
	static String collegeName="jntu";

	
	public static void main(String[] args) {
		//static area
		//object creation 
		Test3 obj = new Test3();
		System.out.println(obj.stid);
		System.out.println(obj.stname);
		System.out.println(Test3.collegeName);
		System.out.println(collegeName);
		
	}
}


note:
for a single class how many object(s) we can create?

no limit

1000 students  are there in my collegeName
 to store each and every student do we create 1000 object(s)
 or single object?
 
 every student data is specific it's not common.
 
 Student roslin = new Student(100,"Roslin","acc");
 Student Izhar = new Student(101,"Izhar","acc");
 
 

class Human
{

   write(),play(),sing()...
   
}



130 crs

150 crs

operators:

  operators are symbols or special characters that perform 
  specific operations on one or more operands
  (varialbes,constants or expressions)
  
  -unary operators
  -assignment operators
  -arithmetic operators(+,-,*,/,%)
  -relational operators
  -bitwise operators 
  
  unary operators require only one operand.
  unary operators are used to perform various operations i.e
  
    incrementing/decrementing a value by one.
	negating an expression 
	inverting the value of a boolean 
	
example:
`````````

public class Test4 {
	
	public static void main(String[] args) {
		
		int x=10;
		//post inrement 
		System.out.println(x++);//10
		
		//pre increment operator
		System.out.println(++x);//12
		
		System.out.println(x--);//12(11)
		
		System.out.println(--x);//10
		
		
		
	}

}


example:
````````

public class Test4 {
	
	public static void main(String[] args) {
		
		int a=10,b=10;
		boolean c = true;
		boolean d = false;
		
		System.out.println(a++ + ++a);//10+12=22
		
		System.out.println(b++ + b++);//10 + 11 = 21
		
		System.out.println(!c);
		System.out.println(!d);
	}

}


Arithmetic Operators:
`````````````````````
used to perform addition,substraction, multiplication,
and division.

example:
`````````

public class Test4 {
	
	public static void main(String[] args) {
		
		int a=10,b=5;
		
		System.out.println(a+b);//15
		System.out.println(a-b);//5
		System.out.println(a*b);//50
		System.out.println(a/b);//2
		System.out.println(a%b);//0
		
		System.out.println(10*10/5+3-1*4/2);
		
		/*10*2+3-1*2
		20+3-2
		23-2
		21*/
		
	}

}


left shift and right shift operators:
`````````````````````````````````````

<< , it is used to shift all of the bits in a value to the left 
side of a specified number of times.

	
  
10<<2 =10*2^2 = 10*4 = 40
10<<3 = 10*2^3 = 10 *8 = 80
15<<4 = 15*2^4 = 15*16 =240


>>, it is used to move the value of the left operand to rifht by
the number of bits specified by the right operand.


10>>2 => 10/2^2 = 10/4 = 2
20>>2 => 20/2^2 = 20/4 = 5
20>>3 ==> 20/2^3 = 20/8 = 2


logical and , logical or:
```````````````````````````
&& operator doesn't check the second condition 

if the first condition is false it checks the second condition only.

it checks the second condition only if the first condition is true.


& operator always checks both conditions whether first condition 
is true or false.

example:
`````````

public class Test5 {

	
	public static void main(String[] args) {
		
		
		int a=10,b=5,c=20;
		System.out.println(a<b&&a<c);//false&&true=false 
		System.out.println(a<b&a<c);//false&true =false
		
	}
}


example:
``````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10,b=5,c=20;
		
		System.out.println(a<b&&a++<c);//false
		System.out.println(a);//10
		
		System.out.println(a<b&a++<c);//false
		System.out.println(a);//11 because second condition is checked
		
	}
}

java or operator/logical || / bitwise or |
`````````````````````````````````````````

logical or || operator doesn't check the second condition 
if the first condition is true. 

it checks the second condition only if the first condition is
false.

the bitwise | operator always checks both conditions whether first 
condition is true or false.


example:
`````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10,b=5,c=20;
		
		System.out.println(a>b||a<c);//true||true =true
		System.out.println(a>b|a<c);//true|true = true
		
		
		System.out.println(a>b||a++<c);//true
		System.out.println(a);//10
		
		System.out.println(a>b|a++<c);//true
		System.out.println(a);//11 because second condition is checked
		
	}
}
Ternary Operator:
`````````````````
Ternary Operator is used as one of the replacement for if-then-else
statement and used a lot in the java programming.

it is the conditional operator which takes three operands.

example:
````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10,b=20;
		System.out.println(a>b?a:b);
	}
}

assignment operator:
````````````````````
it is one of the most common operators. 
it is used to assign the value on its right to the operand on its left.

example:
````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10;
		int b=20;
		a+=4;//a=a+4(14)
		b-=4;//b=b-4(16)
		
		System.out.println(a);
		System.out.println(b);
		
		System.out.println(a*=2);//28(a=a*2)
		System.out.println(b/=2);//b=b/2(8)
		System.out.println(a+=b);//a=a+b(28+8=36)
	}
}

command line arguments in java:
```````````````````````````````
the arguments which we are passign while we are executing the program 
those arguments will be supplied to the main() method as a string array 
type.

based on the requirement we need to convert those string array values
into corresponding required types (int,float,double...)

example:
``````````

public class Test6 {
	
	public static void main(String[] args) {
		
		System.out.println(Integer.parseInt(args[0])+Integer.parseInt(args[1]));
	}

}

example:
``````````

public class Test6 {
	
	public static void main(String[] args) {
		
		
		float x = Float.parseFloat(args[0]);
		
		float y = Float.parseFloat(args[1]);
		
		System.out.println(x+y);
	}

}

control statements/conditional statements
``````````````````````````````````````````
java compiler executes the code from top to bottom.


The statements in the code are executed according to the order
in which they appear.



However, java provides statements that can be used to control the 
flow of the java code. 
such statements are called control statements


java provides three types of control statements 


1.Decision making statements
2.loop statements
3.jump statements


1.Decision making statements:
`````````````````````````````

as the name suggests, decision making statements decide 
which statement to execute and when.


Decision making statements evoluate boolean expression and 
control the progrma flow depending upon the result of the condition 
provided.

There are two types of decision making statemetns in java, i.e 
   -if 
   -switch
   
   
if statement:
``````````````
this staement is used to evoluate a boolean condition.

the condition of the if statement gives a boolean value either true 
or false.

in java, there are four types of if statements 

 1.simple if statement
 2.if-else statement
 3.if-else-if ladder
 4.nested if statement 
 
 

1.simple if statement:
``````````````````````
syntax:

 if(condition)
 {
   //statemetns
 }
 
example:
````````

public class Student {

	
	public static void main(String[] args) {
		
		int x=10,y=20;
		
		if(x+y>20) {
			System.out.println("x+y is greater than 20");
		}
		
	}
}

2.if-else statement:
````````````````````
a block is a concept of in between { and }

 if
 {
 
 }

if else staement is an extension of if statement, which uses 
another block of code. i.e catch block.

The else block is executed if the condition of the if block is 
evlouated as false.


syntax:
  
     if(condition){
	   //statement1;//executes when condition is true
	   }
	 else{
	   statement2 ;//executes when condition is false.
	 }

 
example:
`````````

public class Student {

	
	public static void main(String[] args) {
		
		int x=10,y=20;
		
		
		
		if(x+y<20) {
			System.out.println("x+y is less than 20");
		}
		else
		{
			System.out.println("x+y is greater than 20");
		}
	}
}

if-else-if ladder:
`````````````````````

it contains 

 1 if block
 
 multiple else if blocks 
 
 1 else block 
 
 syntax:
 
  if(condition1)
  {
    statement1;//executes when condition 1 is true
  }
  else if(condition2)
  {
    statement2;//executes when condition2 is true
  }
  else if(condition3)
  {
    statement3;//executes when conditio3 is true
  }
  ...
  else
  {
    statement4;//executes when all the conditions are false.
  }
  
example:
`````````

public class Student {

	
	public static void main(String[] args) {
		
		String city="Agra";
		
		if(city=="Chennaih") {
			System.out.println("city is chenniah");
		}
		else if(city=="Hyderabad")
		{
			System.out.println("city is Hyderabad");
		}
		else if(city=="pune")
		{
			System.out.println("city is pune");
		}
		else
		{
			System.out.println(city);
		}
			
	}
}


nested if statement:
```````````````````
in nested if statement, the if staetment can contain a if 


syntax:


  if(condition1)
  {
    staetment1;//executes when condition1 is true
	
	 if(condition2)
	 {
	    statement2;//executes when condition2 is true
	 }
	 else
	 {
	    statement3;//executes when condition2 is false.
		
	 }
  }
  
  

example:
`````````

public class Student {

	
	public static void main(String[] args) {
		
		int a=10,b=20;
		if(a==10)
		{
			if(b!=20)
			{
				System.out.println("dhaaps");
			}
			else
			{
				System.out.println("ramakrishna");
			}
			
		}
	}
}




switch statement:
````````````````

switch statement executes one statement from multiple conditions. 
it is like if-else-if ladder statement.


1.there can be one or n number of case values for a switch expression.

2.the case value must be of switch expression type only.
  the case value must be literal or constant.it doesn't allow 
  variables.
  
3.the case value must be unique, in case of duplicate value it will give you compile time error.


4.java switch expression type must be of byte,short,int,long(with its 
wrapper type),enums and string.

5.each case statement can have a break statement which is optional.

syntax:
```````
 switch(expression)
 {
 
   case value1:
   //code to be executed
   break;//optional
   
   case value2:
   //code to be executed
   break;//optional 
   
   ....
   
   default:
   //code to be executed if all case values are not matched
   
 
 }


}


 
example:
````````


public class Test6 {
	
	public static void main(String[] args) {
		String country="singapore";
		
		//constant
		final String value="singapore";
		
		switch(country) {
		
		case "singa" + "pore":
			System.out.println("iam from singapore");
			break;
			
	
		case "india":
			System.out.println("iam from india");
			break;
			
		case "malaysia":
			System.out.println("iam from malaysia");
			break;
			
		default :
			System.out.println("iam from universe");
		
		}
			}
}



  
  
    
loop statements:
`````````````````
Loops in Java is a feature used to execute a particular part
 of the program repeatedly if a given condition evaluates to be true.


   -for loop
   -while loop 
   -do while loop
   
   
   
   
for loop:
`````````
purpose:

this for loop is used to iterate a part of the program 
several/multiple times.

when should you use for loop?

if the number of iteration is fixed, it is recommended to use
for loop.

 -simple for loop
 -nested for loop
 -for each or enhanced for loop
 -labelled for loop

 simple for loop:
 ````````````````
 we can initilize the variable,
 check the condition ,
 increment/decrement the value 
 
 it consitsts of four parts
 
 1.initialization -it is an optional condition 
 
 2.condition 
 
 3.increment/decrement
 
 4.statement
 
syntax:

 for(initialization;condition;increment/decrement)
 {
  //statement 
 }
 
example:
```````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
      int i=1;
       for(i=1;i<=10;i++)
       {
    	   System.out.println(i);
       }
	    
	}
}

//program to displaying first 10 numbers in reverse order?

example:
`````````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
      int i=10;
       for(;i>=1;i--)
       {
    	   System.out.println(i);
       }
	    
	}
}


display even numbers from 1 to 10 using for loop and if statement?

2

4

6

8

10

example:
``````````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
		
		  for(int i=1;i<=10;i++) { 
			  if(i%2==0)
			  {
				 System.out.println(i); 
			  }
		  
		  }
		 
	   // % operator is giving you reminder
	   
	   
	}
}

assignment:
```````````
display odd numbers from 1 to 10 using for loop and if statement?


example:
````````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
		
		  for(int i=1;i<=10;i++) { 
			  if(i%2!=0)
			  {
				 System.out.println(i); 
			  }
		  
		  }
		 
	   // % operator is giving you reminder
	   
	   
	}
}


nested for loop:
````````````````
defining for loop inside another for loop. 


if we have a for loop inside another for loop, it is known as 
nested for loop.

The inner for loop executes completely whenever outer for loop 
executes.

once control comes from outerfor loop to inner for loop, it executes inner for loop 
until the condition became false, once condition false 
again it goes back to outerfor loop then comes to inner loop like this 
flow is going on.



example:
````````
//program on nested for loop
public class Test2 {

	public static void main(String[] args) {

		// loop of i

		for (int i = 1; i <= 3; i++) {
			// loop of j
			for (int j = 1; j <= 3; j++) {
				System.out.println(i + " " + j);
			}
		}

        
	}
}

/*output:
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3*/



output:
````````
*
* *
* * *
* * * *
* * * * *









example:
`````````

public class Test3 {

	public static void main(String[] args) {
		
		//define the outer for loop
		
		//outer for loop
		for(int i=1;i<=5;i++)
		{
			//inner for loop
			
			for(int j=1;j<=i;j++)
			{
				System.out.print("*");
			}
			
			System.out.println();
			
		}
	}
}

output:
```````
*
* *
* * * 
* * * *
* * * * * 






output:
````````
* * * * * *
* * * * *
* * * *
* * * 
* * 
*
   do this program as an assignment?
   
   











for each loop or enhanced for loop:
````````````````````````````````````

this enhanced for loop introduced from java 1.5 version onwards.

purpose:
``````````
it provides an alternative approach to traverse the 
array or collection in java.


it is mainly used to traverse the array or collection elements.

how the values will be stored inside an array variable?
  
  based on the index 
  
  array index starts from 0th location .
  
  
 int a[]={100,200,300};
 
  sysout(a[0]);
  sysout(a[1]);
  
  
note:
if the array length is 'n' 
maximum index is 'n-1'
because array index starts from 0 th location

  

syntax of foreach loop:
````````````````````````
it consists of datatype with the varaible followed by a colon (:) , then array or collection varaible.

  for(datatype variable:actualvaraible)
  {
  
     //body of for each loop
  }


int a[]={10,20,30,40,50};


  for(int b:a)
  {
    System.out.println(b);
  }

example:
`````````
class Test4
{
	
	public static void main(String[] args) {
		
		int a[]= {10,20,30,40,50};
		
		System.out.println(a[0]);
		System.out.println(a[1]);
		System.out.println(a[2]);
		System.out.println(a[3]);
		System.out.println(a[4]);
		
		System.out.println("=======using for loop displaying array elements============");
		
		for(int i=0;i<a.length;i++)
		{
			System.out.println(a[i]);
		}
		
		System.out.println("======using for each loop displaying array elements===");
		
		for(int b:a)
		{
			System.out.println(b);
		}
		
	}
}


//using for each loop calculate total of array elements
  int a[] ={1,2,3,4};
  
answer:
```````

public class Test5 {
	
	public static void main(String[] args) {
		
		int a[]= {1,2,3,4};
		int sum=0;
		for(int b:a)
		{
			sum=sum+b;
		}
		
		System.out.println("sum of array elements is : " + sum);
	}

}

 
 

java labelled for loop:
```````````````````````
we can have a name of each java for loop.

To do so, we used label before the for loop.

it is useful while using the nested for loop as we can break/continue
specific for loop.

syntax:

  labelname:
  
   for(intialization;condition;increment/decrement)
   {
     //code to be executed
    }
	
example:
`````````
//program on nested for loop
public class Test2 {

	public static void main(String[] args) {

		// using label for outer for loop
	aa:
		for (int i = 1; i <= 3; i++) {
			// using label for inner forloop of j
			
	bb:
			for (int j = 1; j <= 3; j++) {
				
				if(i==2&&j==2) {
					break aa;
				}
				System.out.println(i + " " +j);
			}
		}

	}
}

/*output:
1 1
1 2
1 3
2 1
*/



  

java while loop:
`````````````````
the java while loop is used to iterate a part of the program 
repeatedly until the specified condition is true.

as soon as the condition becomes false, the loop automatically stops.

the while loop is considered as a repeating if statement. 
if the number of iternation is not fixed, it is recommended to use the  while loop.


syntax:
```````    
   //intialize the value;
    while(condition)
	{
	  //code to be executed;
	  increment/decrement ;
	}

write one java program displaying 1 to 10 numbers using while loop?

example:
````````

public class Test6 {
	
	public static void main(String[] args) {
		
		//initialization 
		int i=1;
		//while loop
		
		while(i<=10)
		{
			System.out.println(i);
			i++;
		}
	}

}

do this program to display the 1 to 10 numbers in reverse order?


public class Test6 {
	
	public static void main(String[] args) {
		
		//initialization 
		int i=10;
		//while loop
		
		while(i>=1)
		{
			System.out.println(i);
			i--;
		}
	}

}


do while loop:
``````````````
do while loop is used to iterate a part of the program 
repeatedly,until the specified condition is true.

if the number of iteration is not fixed and you must have to execute
the loop at least once, it is recommended to use a do-while loop.

do while loop is called an exit control loop.

java do while loop is executed at least once because condition is 
checked after loop body.


syntax:
```````
  do{
  
    //code to be executed/loop body
	//update staetment
  
  } while(condition);
  
  
example:
````````

public class Test7 {
	
	public static void main(String[] args) {
		
		int i=1;
		do {
			System.out.println(i);
			i++;
			
		} while (i>=10);
		
	}

}

for loop v/s while loop v/s do-while loop:
``````````````````````````````````````````

 if the no.of iteration is  fixed, then it is recommended to use 
  for loop 
  
 if the no.of iteration is not fixed, then it is recommended to use
 while loop 
 
  if the no.of iteration is not fixed and you must execute the 
  statement atleast once then we should use do while loop.
  
  
jump statements:
````````````````
Jump statements are one of the types of control statements in Java that directs the flow of execution in a program.


 break 
 continue
 
break statement:
````````````````
it is encountered inside a loop, 
the loop is immediately terminated and the program control resumes at the next statement following the loop.


break statement is used to break loop or switch statement.


it breaks the current flow of the program at specified condition.

in case of inner loop, it breaks only inner loop.


we can use java break statement in all types of loops such as

 -for loop,
 -while loop 
 -do while loop
 
 syntax:
 
      jump-statement;
	  break;
	  
	  
example:
````````

public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=10;i++)
		{
			if(i==5) {
				//breaking the loop
				break;
			}
			System.out.println(i);
		}
		
	
	}

}


 break statement with inner loop:
 
 it breaks inner loop only if you use break statement inside 
 the inner loop.
 
 
example:
`````````

public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=3;i++)
		{
			//inner loop
			for(int j=1;j<=3;j++)
			{
				if(i==2&&j==2)
				{
					break;
				}
				System.out.println(i + " " +j);
			}
			
		}
		
	
	}

}



3 assignments:

use break statement inside labelled for loop?

use break statement inside while loop?

use break statement inside do-while loop?


continue statement:
````````````````````
it is used in loop control structure when you need to jump 
to the next iteration of the loop immediately.

it can be used with all types of loops such as for,while and dowhile 



purpose: it is used to continue the loop.

note:

it continues the current flow of the program and skips the remaining 
code at the specified condition .


   for(int i=1;i<=10;i++)
   { 
      if(i==5){
	  continue;
	  }
	  sysout(i)
   }
1
2
3
4
6
7
8
9
10

in case of an inner loop, it continues the inner loop only.


syntax:

     jump-statement;
	 continue;
	 
example:
````````
`
public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				continue;
			}
			System.out.println(i);
			
		}
		
	
	}

}

example of continue statement with inner for loop:
`````````````````````````````````````````````````````

public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=3;i++)
		{
			//inner loop
			for(int j=1;j<=3;j++)
			{
				if(i==2&&j==2) {
					continue;
				}
				System.out.println(i + " " + j);
			}
			
		}
		
	
	}

}

assignment:
```````````
use continue statement in labelled for loop?
use continue statement in while loop?
use continue staetment in do while loop?  
  
how to read the input from the keyboard:
``````````````````````````````````````````
example:
`````````
import java.util.Scanner;

public class Test8 {

	
	public static void main(String[] args) {
		
		
		Scanner s = new Scanner(System.in);
		
		System.out.println("enter the first number");
		
		int fno = s.nextInt();
		
		System.out.println("enter the second number");
		
		int sno = s.nextInt();
		
		int result = fno+sno;
		
		System.out.println("sum is : " + result);
		
	}
}


example on Scanner class to read the String data:
```````````````````````````````````````````````````
import java.util.Scanner;

public class Test8 {

	
	public static void main(String[] args) {
		
		
		Scanner s = new Scanner(System.in);
		
		System.out.println("enter first name");
		
		
		String fname = s.next();
		
		System.out.println("enter last name");
		String lname =s.next();
		
		String fullName = fname+lname;
		
		System.out.println("fullname is: " + fullName);
		
	}
}


assignments:
`````````````
Certainly! Here are some additional assignments related to Java operators:

1. Conditional Operators:
Write a Java program that takes an integer as input from the user and determines if it is a positive number, negative number, or zero using the conditional operator. Display the result on the console.

2. Increment and Decrement Operators:
Write a Java program that takes a number as input from the user and performs the following operations:
- Increment the number by 1 using the increment operator (++).
- Decrement the number by 1 using the decrement operator (--).
Display the updated value of the number on the console after each operation.

3. Ternary Operator:
Write a Java program that takes three numbers as input from the user and determines the maximum of those numbers using the ternary operator. Display the maximum number on the console.

4. Equality and Inequality Operators:
Write a Java program that takes two strings as input from the user and checks if they are equal using the equality operator (==) and the inequality operator (!=). Display "Equal" or "Not Equal" on the console based on the comparison result.

5. Bitwise Shift Operators:
Write a Java program that takes an integer as input from the user and performs the following bitwise shift operations:
- Left shift the number by 2 positions.
- Right shift the number by 3 positions.
Display the updated value of the number on the console after each shift operation.

These assignments will provide you with practice on different Java operators. Make sure to handle user input properly and display the results accurately.

constructor:
````````````

how can we create the object for the class?

 <classname> <objectname> = new <classname>();
 
 Student obj = new Student();
 
 Student ->name of the class
 obj => name of the object
 = -> assignment operator
 new -> dynamic memory alloccation operator
 Student() -> Constrcutor
 
 method:
 
   method is the place where we are writing the logic 
   to perform some operations based on the requirement.
   
   <returntype> <methodname>(){
   
   // block of statement or logic
   }
   
   public void display(){
     //logic 
   }
   
   
   void ->returntype -> not returning any value.
   
   

constructor:
`````````````

constructor is a special member method 

 constructor name and class name must be always same.
 
 
rules to define the constructor:

1.constructor name and class name must be same
2.constructor should not return anything even void also.

class Student{

   //constructor 
    public Student(){
	
	
	}

}

note:
whenever we create the object, corresponding consturctor gets invoked.
explicitly we no need to call like normal methods.



purpose:
`````````
to initalize the object

what do you mean by initialization?

   assigning the values to variables.
   
   
  defualt values can be assigned to the properties of the class 
  by system defined default consturctor.
  
  
  user defined default constructor:
  purpose: to assign our own values into the properties of the class 
  based on the requirement.
  
  
example:
`````````

public class Student {

	int stid;
	String stname;
	
	/*
	 * public Student() {
	 * 
	 * stid=0; stname=null; }
	 */
	
	//user defined default consturctor
	public Student()
	{
		stid=100;
		stname="Roslin";
	}
	
	public void display()
	{
		System.out.println(stid + " " + stname);
	}
	
	
	
	//define main()
	
	public static void main(String[] args) {
		
		Student obj = new Student();
		obj.display();
		
	}
}



types of constructor:
`````````````````````
1.system defined default constructor
2.user defined default constructor
3.parameterized constructor

default constructor:

 it is a constructor which doesn't takes any parameters.
 
 note:
 when we define any parameterized constructor, compiler will never 
 generate system defined default constructor.
 
 
example:
`````````

public class Student {

	int stid;
	String stname;
	
	/*
	 * public Student() {
	 * 
	 * stid=0; stname=null; }
	 */
	
	//user defined parameterized consturctor
	public Student(int stid, String stname)
	{
		this.stid=stid;
		this.stname=stname;
	}
	
	public void display()
	{
		System.out.println(stid + " " + stname);
	}
	
	
	
	//define main()
	
	public static void main(String[] args) {
		//created the object using parameterized constructor
		Student obj = new Student(100,"Yuanyang");
		obj.display();
		
	}
}

purpose of parameterized constructor:
while we are creating the object only, we can initalize the values.





note:

by differentiating the package names, we can define the multiple 
classes with the same name.

but inside the same package, we can't define more than one class 
with the same name.

oops principles:
`````````````````

  java is object oriented programming language
  
  why java is object oriented programming language?
  
  ->because it follows oops principles which were given by 
    object management group(candian organization)
	
.net
php
python etc.. 
java 
cpp

   -object oriented programming languages

   
what are the oops principles we have?

   we have 4 principles are there 
   
     1.inheritance
	 2.polymorphism
	 3.abstraction 
	 4.encapsulation 
	 
	 

to implement above principles in java, we are using two concepts

  1.class 
  2.object
  

inheritance:
````````````
inheritance is also known as is-a relation.

it is the process of getting the properties or acquring the properties 
from parent class to child class. 

parent class:
it is a class which is giving the properties
child class:
it is also a class which is taking the properties.

whenever we apply the inheritance, it is recommended to create the objectfor 
child class.

with the object of child class, we are able to invoke parent class 
properties and child class properties.


 
  parent class contains parent class properties only
  child class contains child class proeprties + parent class properties
  
  
 without inheritance:
 ````````````````````
  class Test1{
  
  
      public void sum(int x, int y)
	  {
	  return x+y;
	  }
  }
  
  
  
  class Test2{
      public void sum(int x, int y)
	  {
	  return x+y;
	  }
  }
  
  
  with inheritance:
  `````````````````
  //parent class
  class Test1{
  
  
      public void sum(int x, int y)
	  {
	  return x+y;
	  }
  }
  
  
  //child class
  class Test2 extends Test1{
      public static void main(String[] args){
	  
	  
	     Test2 obj = new Test2();
		 int sum = obj.sum(3,4);
		 System.out.println("sum is : " +sum);
	  }
  }
  
advantage of inheritace:
`````````````````````````
1.it reduces the duplication of the code
2.in reduces the memory consumption 
3.finally it leads to increase the performance of the application.


note:
we can achieve the concpet of inheritance by using one java reserved 
keyword i.e .'extends' that should be used in the context of child 
class.


example:
`````````


class Parent
{
	
	public void sum()
	{
		System.out.println("iam from sum");
	}
}

class Child extends Parent
{
	public void sub()
	{
		System.out.println("iam from sub");
	}
}
public class Test1 {
	
	public static void main(String[] args) {
		
		Child obj = new Child();
		obj.sum();
		obj.sub();
	}

}












example:
````````



class Parent
{
	
	 void sum()
	{
		System.out.println("iam from sum");
	}
}

 class Child extends Parent
{
    void sub()
	{
		System.out.println("iam from sub");
	}
}
//execution logic class
public class Test1 {
	
	public static void main(String[] args) {
		
		/*
		 * Child obj = new Child(); 
		 * obj.sum(); 
		 * obj.sub();
		 */
		
		Parent obj = new Parent();
		obj.sum();
		//error: obj.sub();
		
	}

}


polymorphism in java:
`````````````````````
polymorphism in java makes it possible to write a method
that can correctly process lots of different types of functioanlites
that have the same name.

we also gain consistency in our code by using polymorphism.

we also improves readability of the code.


 one form into many forms.
 
 poly: many
 morph:forms
 
 to achieve this polymorphism in java, we have two concepts are there
 
 1.method overloading
 2.method overriding
 
 
 
method overloading:
```````````````````
 method name is same but signature is different.
 
 signature:
 
 
    no.of parameters
	types of parameters
	
	or atleast order of parameters.
	
	

example:
   
    public void sum(int x, int y)
	{
	
	}
	
	public void sum(float x, float y)
	{
	}
	
	public void sum(int x, int y, int z)
	{
	}

   public void sum(int x, float y)
   {
   }
   
   public void sum(float x, int y)
   {
   }
   

advantage of method overloading:

we can define multiple functioanlites by defining the same name
just by changing the parameters.

so that programmer can easily remember the method(s)

readability of the code gets increased because of method overloading.

note:
to perform method overloading one class is enough.

example:
````````
package com.accenture.java;

public class Test2 {
	
	public void sum(int x, int y)
	{
		System.out.println("integer sum is : " +(x+y));
	}
	
	public void sum(float x, float y)
	{
		System.out.println("float sum is :" + (x+y));
	}
	
	public void sum(int x, int y, int z)
	{
		System.out.println("three integer sum is: " +(x+y+z));
	}
	
	public static void main(String[] args) {
		
		Test2 obj= new Test2();
		obj.sum(1, 2);
		obj.sum(2.3f, 3.4f);
		obj.sum(4,5,6);
	}

}

note:
compile time polymorphism , polymorphism can be resolved by the 
reference variable at compiletime by the java compiler that means 
a method call can be binded with which method that can be decided by 
the reference variable at compiletime by the java compiler.

this process is we call it as compile time polymorphism or static 
polymorphism 


method overriding:
``````````````````
method name is same but body/logic is differnt from parent class to 
child class.

to achieve method overriding minimum we require two classes with 
parent-child relation.

runtime polymorphism, polymorphism can be resolved at runtime based 
on the object type not based on the refefence variable like compile time 
polymorphism.

Parent.java:
`````````````
package com.accenture.java;

public class Parent
{
	
	public void sum(int x, int y)
	{
		System.out.println("parent sum is: " +(x+y));
	}
}

Child.java:
```````````
package com.accenture.java;

public class Child extends Parent
{
	@Override
   public void sum(int x, int y)
   {
	   System.out.println("integer substraction is: " +(x-y));
   }
}




Test1.java:
```````````
package com.accenture.java;

//execution logic class
public class Test1 {
	
	public static void main(String[] args) {
		
		
//		//child class object creation 
//		Child obj = new Child();
//		obj.sum(4, 3);
//		
//		//parent class object creation 
//		Parent obj1 = new Parent();
//		obj1.sum(4, 3);
//		
		-
		//runtime polymorphism
		Parent obj2;
		obj2= new Child();
		
		obj2.sum(4, 3);
	
	}

}
practice:
```````````
->inheritance
->method overloading
->method ovverriding

assignment-1:
`````````````
Implement an employee hierarchy in Java using inheritance. 
Create a base class called Employee and derived classes such as Manager, 
Engineer, and Intern. Each derived class should have its specific attributes and 
behavior. For example, the Manager class might have a bonus calculation method, 
while the Intern class could have an intern-specific task method. 
Write a program that demonstrates the use of this employee hierarchy by creating 
instances of different employees and performing actions specific to each employee type.


assignment-2:
`````````````
Develop a simple banking system using Java inheritance. Create a base class called 
BankAccount and derived classes such as SavingsAccount and CheckingAccount. 
Each derived class should have its specific methods, such as calculating interest for 
savings accounts or implementing overdraft protection for checking accounts. 
Write a program that allows users to perform basic banking operations such as 
depositing, withdrawing, and checking account balances for different account types.






->abstraction (abstract class, interface)
->super keyword
->Object class (brief idea)


























