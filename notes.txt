                              JAVA
							  
							  
What is java?

  							  
	programming language?

    	to  develop the software
		
object oriented programming language
		
		
		in java , where exactly data will store?
		
		in the form of object
	
	
	by using java, what we can achieve?
	
	  to develop the software/application
	  
	  
	1995 - james gosling 

 when he released this software, he released into three 
editions

    1.jse - java standard editions
	
	     -desktop / standalone application
		 
		 
    2.jee - java enterprise editions
	
	  -jee got implemented on top of jse
	  -distributed applications
	  
    3.jme - java micro/mobile edition

            ->mobile or micro applications
			->standalone/distributed
			
types of application(s):

   ->desktop / standalone application
   ->internet / distributed application(s)


   calculator
   acrobatic reader
   antivirus  - desktop application 
   
   results are not sharable across the globe.
   
   
internet application:

  www.facebook.com

www.gmail.com 

www.yahoo.com 
 --> distributed applicatons

 results are sharable across the globe.
 
 java -> application 
 
    we have to write the java program?
	

how can we write the java program?

we have to follow syntaxes.

  
  
 what is syntax?
 
 rules we have to follow while we are coding
 
   language vendors
   
   java was given by?
   
      sun microsystem
	  oracle
	  
	  scjp 
	  ocjp
	  
   
what are the steps we have to follow to write the java 
program?


1.download the java software (jdk)-open source
2.install the software 
3.select the editor/ide (eclipse,netbeans,myeclipse)
4.write the java program
5.save the java program
6.compile the java program
7.execute/run the java program



structure of java program:

  every java program can start with by defining the class.
  
  class <classname>
  {
  
      public static void main(String[] args){
	  
	     //logic
	  
	  }
  
  
  }


how can we save:

 <filename>.java
 
 Test1.java
 
 can we give filename and class name both are same?
 
  yes we can 
  
  
how can we compile?

   we have one command 
   
      javac <filename>.java
	  
what happend when we compile the java program?

java compiler 
    -system defined java program 
	
	-.java file(source code)
	
	-convert .java file into .class file
	
	-.class file contains - byte code
	
	-byte code is not human readable code
	
	if we follow the syntaxes correctly then only 
	compiler will give you .class file which contains 
	byte code otherwise compiler will give you 
	compile time errors.
	
	.class file got generated based on the filename 
	 or class name?
	 
	   class name only i.e.  Welcome.class
	   
	
jvm will take this .class file as an input 
and converts byte code into machine level code.

how can we execute/run the java program?

   jvm
   
   command: java <classname>
   
    java Welcome
	
note:
whenever we execute the java program, jvm internally calls
or invokes predefined method i.e. main() 




class:
``````
every java program should starts with by defining the class.

how can we define the class?

  class <classname>;
  
  class -> it is a java reserved keyword
  
  all java reserved keywords must be in lower case only.
  
   class <classname>
   {
   }



example:
`````````
class Welcome{

  public static void main(String[] args){
  
      
	  System.out.println("welcome to java learning");
	
	
  
  }



}







path:

path is the location where all java related tools 
are available.

   C:\Program Files\Java\jdk-20\bin
   
 
class:
``````
 variable:
 
 syntax:
 
   <datatype> <varialename> = <value>;
 
   purpose: to store the data.
   
   100
   
   int x=100;
 
   what datatypes we have in java?
   
  primitive datatypes:
  
   in java, we have 4 category datatypes we have
   
    1.integer -to store the integer values
	     byte,short,int,long
	2.float 
	     float,double
	3.character 
	     char
	4.boolean 
	     boolean 
		 
		 
  every datatype is maintaining two things


             1.range
			 2.memory size
			 
			 
byte 

  1 byte 
  -128 to 127
  
  byte b = 130;
  
-2^n-1 to (2^n-1) - 1
  
   
   where n reprsents no.of bits
   
   
   1 byte => 8 bits
   
   -2^8 to 2^8 -1
   -128 to 127
   
   
   short -> 2 bytes
   
   int -> 4 bytes, long - 8 bytes
   
   float -> to store decimal values 
   
      float-> 4 bytes
	  double -> 8 bytes
   
   float f = 3.4f;
   
   double d = 8.9;
   
   
   by default decimal value is of double type.
   
   
   
   3.4
   
   
   3 -> scale
   4 -> precision
   
   the precision size upto 5 digits if our dataype is 
   float
   
   the precision size upto 14 digits if our datatype is 
   double.
   
    4.544454(float)
	4.34353535345643434534543;(double)
   
   byte x = 120;// 1 byte memory only
   
   
   character :
     to store single character information
     it should enclosed within the single quotes	 
	 
	 char c = 'r';//valid
	 2 bytes
	 
	 java follows unicode international language
	 it supports almost 18 international languages
	 
	 
	boolean :
	
	  boolean 
	  
	  to store logical values either true or false.
	  
	  boolean b = true;
	  
	 true or false -> these are the java reserved keywords
	 
	 
	float datatype precision max size is 7 digits
    double datatype precision max size is 15 digits

example:
````````
class DataTypesDemo{

public static void main(String[] args){

            byte b = 100;
			float f=5.6878965432f;
			double d = 8.98786758943679812345;
			
			char c = 'r';
			char c1[]={'r','k'};
			
			String s = "rk";
			System.out.println("byte value is: " + b);
			System.out.println("float value is : " + f);
			
			System.out.println("double value is:" + d);
			
			System.out.println("Character value is : " + c);

            System.out.print(c1[0]);
			System.out.println(c1[1]);
			
			System.out.println("string value is " + s);

}




}
	


variable:

  to store the data
  

method:
```````
method is the placce where we are writing the logic 
which is used to perform some operations based on the 
requirement.

syntax:

   <returntype> <methodname>([parameters])
   {
     //logic
   }




ex:

   void display()
   {
     System.out.println("welome");
	}
	
	void -returntype 
	but meaning is if a method is not returning any value we 
	should specify return type as void.
	
	
	 int getSum()
	{
	  return 2+3;
	 }
	 
	 
note: return type and return value type must be 
compatible with each otehr otherwise we will get 
compile time errors.


define one method which gives your salary?

 
    float getSalary(){
	
	  return 7896.75f;
	}

define one method which gives your fullname?


    String getFullName(String firstName,String lastName)
	{
	  return firstName + lastName;
	}
	
	  getFullName("Rama","Krishna");
	  
	    RamaKrishna
		


define one method which takes two values and gives 
multiplication?

                   double getMultiplication(double x, double y)
				   {
				      return x*y;
				   }
 


getMultiplication(5.6,6.7);



variables

method


class:
  class is  a collection of variables and methods 
  into a single unit.
  
  class <classname>{
  
     //variables
	 //methods
  
  }
  
 example:
````````````
class Student
{
  //variables or properties or datamembers
  int stid=100;
  String stname="rama";
  double stmarks=90;
  
  //method(s) 
  public void getStudentInfo(){  
  System.out.println("student id is : " + stid);
  System.out.println("student name is : " + stname);
  System.out.println("student marks is: " + stmarks);
  }
}  

	note:

java supports only member properties 
it doesn't support non member properties

note:

in java, inner method definition is not possible, where as in java
inner method invocation is possible.


object:
```````
instance of a class is known as object.

instance:

allocating sufficient amount of memory spaces for the
properties which we declared inside the class.

	
   how can we create the object:

syntax:

   <classname> <objectname> = new <classname>();
   
   Student obj = new Student();
   
   
 example:
 `````````
 class Student
{
  //variables or properties or datamembers
  int stid=100;
  String stname="rama";
  double stmarks=90;
  
  //method(s) 
  public void getStudentInfo(){  
  System.out.println("student id is : " + stid);
  System.out.println("student name is : " + stname);
  System.out.println("student marks is: " + stmarks);
 
  }
  
  public static void main(String[] args){
	  
	  //invoke or call getStudentInfo()
	  
	  //create the object 
	  
	  Student obj = new Student();
	  //call the method using object name
	  //obj.getStudentInfo();
	  
	  System.out.println("student id is : " + obj.stid);
	  System.out.println("Student name is :" + obj.stname);
	  System.out.println("Student marks is: " + obj.stmarks);
  }
 
}  







note:
when you define the class, memory won't be created for the 
properties which you define inside the class, but when we create
the object then only memory spaces will be created for the properties 
of the class to store the data.



  ide - integrated development environment

eclipse,intellij,netbeans,myeclipse etc...



eclipse -> open source
  
  link to download eclipse: https://www.eclipse.org/downloads/
  
 example:
 ```````
 
public class Employee {
	
	//variables declaration 
	int empid;
	String empname;
	float empsalary;
	
	//method definition 
	public void setValues(int empid, String empname, float empsalary) {
		
		this.empid=empid;
		this.empname=empname;
		this.empsalary=empsalary;
	}
	
	
	public void getEmpDetails()
	{
		System.out.println("employee id : " + this.empid);
		System.out.println("employee name : " + this.empname);
		System.out.println("employee salary:" + this.empsalary);
	}
	public static void main(String[] args) {
		
		
		//create the object
		
		Employee obj = new Employee();
		obj.setValues(100, "RAMA", 8978f);
		
		//call the getEmpDetails()
		obj.getEmpDetails();
	}
	
	

}


example:
`````````
//perform additoin of two numbers
public class Test2 {
	
	
	public int getSum(int x, int y)
	{
		return x+y;
	}

	public static void main(String[] args) {
		
		
		Test2 obj = new Test2();
		
		
		System.out.println("sum is : " + obj.getSum(4, 5));
		
	}
}


instance vs static example:



public class Test3 {
	//instance or non-static variables
	int stid=100;
	String stname = "rama";
	static String collegeName="jntu";

	
	public static void main(String[] args) {
		//static area
		//object creation 
		Test3 obj = new Test3();
		System.out.println(obj.stid);
		System.out.println(obj.stname);
		System.out.println(Test3.collegeName);
		System.out.println(collegeName);
		
	}
}


note:
for a single class how many object(s) we can create?

no limit

1000 students  are there in my collegeName
 to store each and every student do we create 1000 object(s)
 or single object?
 
 every student data is specific it's not common.
 
 Student roslin = new Student(100,"Roslin","acc");
 Student Izhar = new Student(101,"Izhar","acc");
 
 

class Human
{

   write(),play(),sing()...
   
}



130 crs

150 crs

operators:

  operators are symbols or special characters that perform 
  specific operations on one or more operands
  (varialbes,constants or expressions)
  
  -unary operators
  -assignment operators
  -arithmetic operators(+,-,*,/,%)
  -relational operators
  -bitwise operators 
  
  unary operators require only one operand.
  unary operators are used to perform various operations i.e
  
    incrementing/decrementing a value by one.
	negating an expression 
	inverting the value of a boolean 
	
example:
`````````

public class Test4 {
	
	public static void main(String[] args) {
		
		int x=10;
		//post inrement 
		System.out.println(x++);//10
		
		//pre increment operator
		System.out.println(++x);//12
		
		System.out.println(x--);//12(11)
		
		System.out.println(--x);//10
		
		
		
	}

}


example:
````````

public class Test4 {
	
	public static void main(String[] args) {
		
		int a=10,b=10;
		boolean c = true;
		boolean d = false;
		
		System.out.println(a++ + ++a);//10+12=22
		
		System.out.println(b++ + b++);//10 + 11 = 21
		
		System.out.println(!c);
		System.out.println(!d);
	}

}


Arithmetic Operators:
`````````````````````
used to perform addition,substraction, multiplication,
and division.

example:
`````````

public class Test4 {
	
	public static void main(String[] args) {
		
		int a=10,b=5;
		
		System.out.println(a+b);//15
		System.out.println(a-b);//5
		System.out.println(a*b);//50
		System.out.println(a/b);//2
		System.out.println(a%b);//0
		
		System.out.println(10*10/5+3-1*4/2);
		
		/*10*2+3-1*2
		20+3-2
		23-2
		21*/
		
	}

}


left shift and right shift operators:
`````````````````````````````````````

<< , it is used to shift all of the bits in a value to the left 
side of a specified number of times.

	
  
10<<2 =10*2^2 = 10*4 = 40
10<<3 = 10*2^3 = 10 *8 = 80
15<<4 = 15*2^4 = 15*16 =240


>>, it is used to move the value of the left operand to rifht by
the number of bits specified by the right operand.


10>>2 => 10/2^2 = 10/4 = 2
20>>2 => 20/2^2 = 20/4 = 5
20>>3 ==> 20/2^3 = 20/8 = 2


logical and , logical or:
```````````````````````````
&& operator doesn't check the second condition 

if the first condition is false it checks the second condition only.

it checks the second condition only if the first condition is true.


& operator always checks both conditions whether first condition 
is true or false.

example:
`````````

public class Test5 {

	
	public static void main(String[] args) {
		
		
		int a=10,b=5,c=20;
		System.out.println(a<b&&a<c);//false&&true=false 
		System.out.println(a<b&a<c);//false&true =false
		
	}
}


example:
``````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10,b=5,c=20;
		
		System.out.println(a<b&&a++<c);//false
		System.out.println(a);//10
		
		System.out.println(a<b&a++<c);//false
		System.out.println(a);//11 because second condition is checked
		
	}
}

java or operator/logical || / bitwise or |
`````````````````````````````````````````

logical or || operator doesn't check the second condition 
if the first condition is true. 

it checks the second condition only if the first condition is
false.

the bitwise | operator always checks both conditions whether first 
condition is true or false.


example:
`````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10,b=5,c=20;
		
		System.out.println(a>b||a<c);//true||true =true
		System.out.println(a>b|a<c);//true|true = true
		
		
		System.out.println(a>b||a++<c);//true
		System.out.println(a);//10
		
		System.out.println(a>b|a++<c);//true
		System.out.println(a);//11 because second condition is checked
		
	}
}
Ternary Operator:
`````````````````
Ternary Operator is used as one of the replacement for if-then-else
statement and used a lot in the java programming.

it is the conditional operator which takes three operands.

example:
````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10,b=20;
		System.out.println(a>b?a:b);
	}
}

assignment operator:
````````````````````
it is one of the most common operators. 
it is used to assign the value on its right to the operand on its left.

example:
````````

public class Test5 {

	
	public static void main(String[] args) {
		
		int a=10;
		int b=20;
		a+=4;//a=a+4(14)
		b-=4;//b=b-4(16)
		
		System.out.println(a);
		System.out.println(b);
		
		System.out.println(a*=2);//28(a=a*2)
		System.out.println(b/=2);//b=b/2(8)
		System.out.println(a+=b);//a=a+b(28+8=36)
	}
}

command line arguments in java:
```````````````````````````````
the arguments which we are passign while we are executing the program 
those arguments will be supplied to the main() method as a string array 
type.

based on the requirement we need to convert those string array values
into corresponding required types (int,float,double...)

example:
``````````

public class Test6 {
	
	public static void main(String[] args) {
		
		System.out.println(Integer.parseInt(args[0])+Integer.parseInt(args[1]));
	}

}

example:
``````````

public class Test6 {
	
	public static void main(String[] args) {
		
		
		float x = Float.parseFloat(args[0]);
		
		float y = Float.parseFloat(args[1]);
		
		System.out.println(x+y);
	}

}

